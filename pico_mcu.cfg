# TBD Addition of a RPi Pico as a secondary MCU for Accel in Klipper

# Defining the RPi MCU
[mcu aux]
## This will need to be found using the 'ls /dev/serial/by-id/*'
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66038B713776933-if00
restart_method: command

[output_pin aux_beat]
### This is to prove a heartbeat on the LED that is onboard the pico
pin: aux:gpio25
value: .50
pwm: True

sensor_type: BME280
#i2c_address:
#   Default is 118 (0x76). Some BME280 sensors have an address of 119
#   (0x77).
#i2c_mcu:
#i2c_bus:
#i2c_speed:
#   See the "common I2C settings" section for a description of the
#   above parameters.

# [adxl345 hotend]
# cs_pin: aux:gpio5
# #   The SPI enable pin for the sensor. This parameter must be provided.
# #spi_speed: 5000000
# #   The SPI speed (in hz) to use when communicating with the chip.
# #   The default is 5000000.
# spi_bus: aux:spi0b
# #axes_map: x, y, z
# #   The accelerometer axis for each of the printer's X, Y, and Z axes.
# #   This may be useful if the accelerometer is mounted in an
# #   orientation that does not match the printer orientation. For
# #   example, one could set this to "y, x, z" to swap the X and Y axes.
# #   It is also possible to negate an axis if the accelerometer
# #   direction is reversed (eg, "x, z, -y"). The default is "x, y, z".

# [adxl345 bed]
# cs_pin: aux:gpio9
# #spi_speed: 5000000
# spi_bus: aux:spi1a
# #axes_map: x, y, z

# [resonance_tester]
# accel_chip_x: adxl345 hotend
# accel_chip_y: adxl345 bed
# probe_points: 100, 100, 40